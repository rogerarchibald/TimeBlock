
Builds/main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  00000556  000005ea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000556  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000e  00800112  00800112  000005fc  2**0
                  ALLOC
  3 .stab         00001a58  00000000  00000000  000005fc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000147d  00000000  00000000  00002054  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  000034d1  2**0
                  CONTENTS, READONLY
  6 .debug_info   000005f4  00000000  00000000  000034e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005a2  00000000  00000000  00003ad6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000001d  00000000  00000000  00004078  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000208  00000000  00000000  00004095  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__vector_3>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 7c 01 	jmp	0x2f8	; 0x2f8 <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 e5       	ldi	r30, 0x56	; 86
  7c:	f5 e0       	ldi	r31, 0x05	; 5
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 31       	cpi	r26, 0x12	; 18
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	11 e0       	ldi	r17, 0x01	; 1
  8c:	a2 e1       	ldi	r26, 0x12	; 18
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a0 32       	cpi	r26, 0x20	; 32
  96:	b1 07       	cpc	r27, r17
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 35 02 	call	0x46a	; 0x46a <main>
  9e:	0c 94 a9 02 	jmp	0x552	; 0x552 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <init_ADC>:




void init_ADC(void){
ADMUX = 0xC7;	//C is to select the internal 1.1V reference, 7 selects the input
  a6:	87 ec       	ldi	r24, 0xC7	; 199
  a8:	80 93 7c 00 	sts	0x007C, r24
ADCSRA = 0x06;	//set prescaler to /64
  ac:	86 e0       	ldi	r24, 0x06	; 6
  ae:	80 93 7a 00 	sts	0x007A, r24
  b2:	08 95       	ret

000000b4 <read_ADC>:



uint16_t read_ADC (void){
	uint32_t voltval = 0;
	PORTC |= 0x10;	//turn on divider return FET
  b4:	44 9a       	sbi	0x08, 4	; 8
	PORTD = 0;	//turn off all BJT's so that in the next line this delay of 60mS doesn't look like a glitch on display
  b6:	1b b8       	out	0x0b, r1	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b8:	2f ef       	ldi	r18, 0xFF	; 255
  ba:	86 e7       	ldi	r24, 0x76	; 118
  bc:	91 e0       	ldi	r25, 0x01	; 1
  be:	21 50       	subi	r18, 0x01	; 1
  c0:	80 40       	sbci	r24, 0x00	; 0
  c2:	90 40       	sbci	r25, 0x00	; 0
  c4:	e1 f7       	brne	.-8      	; 0xbe <read_ADC+0xa>
  c6:	00 c0       	rjmp	.+0      	; 0xc8 <read_ADC+0x14>
  c8:	00 00       	nop
	_delay_ms(60);	//discharge the filter cap down to the divider level (25mS seems about right, 30 is a buffer)
	ADCSRA |= 0x10;	//clear interrupt flag before starting a conversion
  ca:	80 91 7a 00 	lds	r24, 0x007A
  ce:	80 61       	ori	r24, 0x10	; 16
  d0:	80 93 7a 00 	sts	0x007A, r24
	ADCSRA |= 0xC0; //enable ADC and start conversion
  d4:	80 91 7a 00 	lds	r24, 0x007A
  d8:	80 6c       	ori	r24, 0xC0	; 192
  da:	80 93 7a 00 	sts	0x007A, r24
	while(!(ADCSRA & 0x10)){}	//kill time while waiting for conversion to end
  de:	80 91 7a 00 	lds	r24, 0x007A
  e2:	84 ff       	sbrs	r24, 4
  e4:	fc cf       	rjmp	.-8      	; 0xde <read_ADC+0x2a>
	PORTC &= ~(0x10);	//kill the FET to conserve battery
  e6:	44 98       	cbi	0x08, 4	; 8
	voltval |= ADCL;
  e8:	80 91 78 00 	lds	r24, 0x0078
	voltval |= (ADCH << 8);
  ec:	20 91 79 00 	lds	r18, 0x0079
  f0:	30 e0       	ldi	r19, 0x00	; 0
  f2:	32 2f       	mov	r19, r18
  f4:	22 27       	eor	r18, r18
  f6:	a9 01       	movw	r20, r18
  f8:	66 27       	eor	r22, r22
  fa:	57 fd       	sbrc	r21, 7
  fc:	60 95       	com	r22
  fe:	76 2f       	mov	r23, r22
 100:	9a 01       	movw	r18, r20
 102:	ab 01       	movw	r20, r22
 104:	28 2b       	or	r18, r24
	voltval *= 322;	//convert ADC value to hundreds of mV when we're running a /3 divider
 106:	a2 e4       	ldi	r26, 0x42	; 66
 108:	b1 e0       	ldi	r27, 0x01	; 1
 10a:	0e 94 59 02 	call	0x4b2	; 0x4b2 <__muluhisi3>
	voltval /= 100;	//convert ADC value to mV
 10e:	24 e6       	ldi	r18, 0x64	; 100
 110:	30 e0       	ldi	r19, 0x00	; 0
 112:	40 e0       	ldi	r20, 0x00	; 0
 114:	50 e0       	ldi	r21, 0x00	; 0
 116:	0e 94 78 02 	call	0x4f0	; 0x4f0 <__udivmodsi4>
	
	return voltval;	
	
	
 11a:	c9 01       	movw	r24, r18
 11c:	08 95       	ret

0000011e <__vector_3>:

volatile u8 gotosleep = 0;


//servicing the ISR for button press PCINT0 to wake things up, nothing to do here.
ISR(PCINT0_vect){
 11e:	1f 92       	push	r1
 120:	0f 92       	push	r0
 122:	0f b6       	in	r0, 0x3f	; 63
 124:	0f 92       	push	r0
 126:	11 24       	eor	r1, r1
 128:	8f 93       	push	r24
 12a:	9f 93       	push	r25
	asm ("nop");
 12c:	00 00       	nop
	tog_tp1
 12e:	95 b1       	in	r25, 0x05	; 5
 130:	82 e0       	ldi	r24, 0x02	; 2
 132:	89 27       	eor	r24, r25
 134:	85 b9       	out	0x05, r24	; 5
}
 136:	9f 91       	pop	r25
 138:	8f 91       	pop	r24
 13a:	0f 90       	pop	r0
 13c:	0f be       	out	0x3f, r0	; 63
 13e:	0f 90       	pop	r0
 140:	1f 90       	pop	r1
 142:	18 95       	reti

00000144 <setsleepstat>:

}	//end of main


void setsleepstat (u8 newstat){
	gotosleep = newstat;
 144:	80 93 12 01 	sts	0x0112, r24
 148:	08 95       	ret

0000014a <timer0Init>:
static u16 cyclesinstat = 0;	//how many cycles have I been in this status


//initialize timer0 with a 200uS rollover to trigger an ISR
void timer0Init(void){
    OCR0A = 199;   //set timer top to 199
 14a:	87 ec       	ldi	r24, 0xC7	; 199
 14c:	87 bd       	out	0x27, r24	; 39
    TCCR0A = 0x02;  //set WGM for CTC mode with OCR0A as top
 14e:	82 e0       	ldi	r24, 0x02	; 2
 150:	84 bd       	out	0x24, r24	; 36
    TCCR0B = 0x02;  //set CS1 for /8 prescaler
 152:	85 bd       	out	0x25, r24	; 37
    TIFR0 |= 0x02;  //clear the OCF0A overflow flag
 154:	a9 9a       	sbi	0x15, 1	; 21
    TIMSK0 |= 0x02; //Enable interrupts from Timer0 OverflowA
 156:	ee e6       	ldi	r30, 0x6E	; 110
 158:	f0 e0       	ldi	r31, 0x00	; 0
 15a:	80 81       	ld	r24, Z
 15c:	82 60       	ori	r24, 0x02	; 2
 15e:	80 83       	st	Z, r24
 160:	08 95       	ret

00000162 <next_digit>:
}	//end of ISR



//this function will cycle the anodes of the diodes and turn the appropriate anode on (turning it off is accomplished in teh Timer0 overflow ISR.
void next_digit(void){
 162:	cf 93       	push	r28
 164:	df 93       	push	r29
 166:	00 d0       	rcall	.+0      	; 0x168 <next_digit+0x6>
 168:	00 d0       	rcall	.+0      	; 0x16a <next_digit+0x8>
 16a:	cd b7       	in	r28, 0x3d	; 61
 16c:	de b7       	in	r29, 0x3e	; 62

	u8 dig_array[] = {0x04, 0x02, 0x01, 0x08};  //array to cycle through the different anodes
 16e:	84 e0       	ldi	r24, 0x04	; 4
 170:	89 83       	std	Y+1, r24	; 0x01
 172:	82 e0       	ldi	r24, 0x02	; 2
 174:	8a 83       	std	Y+2, r24	; 0x02
 176:	81 e0       	ldi	r24, 0x01	; 1
 178:	8b 83       	std	Y+3, r24	; 0x03
 17a:	88 e0       	ldi	r24, 0x08	; 8
 17c:	8c 83       	std	Y+4, r24	; 0x04
    placeholder ++;
 17e:	80 91 1b 01 	lds	r24, 0x011B
 182:	8f 5f       	subi	r24, 0xFF	; 255
    if(placeholder >= 4){
 184:	84 30       	cpi	r24, 0x04	; 4
 186:	18 f4       	brcc	.+6      	; 0x18e <next_digit+0x2c>

//this function will cycle the anodes of the diodes and turn the appropriate anode on (turning it off is accomplished in teh Timer0 overflow ISR.
void next_digit(void){

	u8 dig_array[] = {0x04, 0x02, 0x01, 0x08};  //array to cycle through the different anodes
    placeholder ++;
 188:	80 93 1b 01 	sts	0x011B, r24
 18c:	02 c0       	rjmp	.+4      	; 0x192 <next_digit+0x30>
    if(placeholder >= 4){
        placeholder = 0;
 18e:	10 92 1b 01 	sts	0x011B, r1
    }
    PORTD = numbers[digits[placeholder]];   //set up bjts on cathodes.
 192:	e0 91 1b 01 	lds	r30, 0x011B
 196:	f0 e0       	ldi	r31, 0x00	; 0
 198:	e4 5e       	subi	r30, 0xE4	; 228
 19a:	fe 4f       	sbci	r31, 0xFE	; 254
 19c:	e0 81       	ld	r30, Z
 19e:	f0 e0       	ldi	r31, 0x00	; 0
 1a0:	ee 5f       	subi	r30, 0xFE	; 254
 1a2:	fe 4f       	sbci	r31, 0xFE	; 254
 1a4:	80 81       	ld	r24, Z
 1a6:	8b b9       	out	0x0b, r24	; 11
	
	
 switch (clockstat){	//this switch will determine the colon/decimal place
 1a8:	80 91 01 01 	lds	r24, 0x0101
 1ac:	81 30       	cpi	r24, 0x01	; 1
 1ae:	19 f0       	breq	.+6      	; 0x1b6 <next_digit+0x54>
 1b0:	83 30       	cpi	r24, 0x03	; 3
 1b2:	31 f0       	breq	.+12     	; 0x1c0 <next_digit+0x5e>
 1b4:	0a c0       	rjmp	.+20     	; 0x1ca <next_digit+0x68>
	 case clockrun:
		if(digits[0] & 0x01){  //if we've got an odd number
 1b6:	80 91 1c 01 	lds	r24, 0x011C
 1ba:	80 ff       	sbrs	r24, 0
 1bc:	06 c0       	rjmp	.+12     	; 0x1ca <next_digit+0x68>
 1be:	04 c0       	rjmp	.+8      	; 0x1c8 <next_digit+0x66>
		}	//set the colon when we have an odd number
		
		break;
		
		case voltdisp:
		if (placeholder == 2){
 1c0:	80 91 1b 01 	lds	r24, 0x011B
 1c4:	82 30       	cpi	r24, 0x02	; 2
 1c6:	09 f4       	brne	.+2      	; 0x1ca <next_digit+0x68>
			PORTD |= 0x08;
 1c8:	5b 9a       	sbi	0x0b, 3	; 11
		}
		break;
		
	}	//end of switch

    PORTC &= ~(dig_array[placeholder]);    //enable the appropriate anode by clearing the Gate of the P-ch FET.
 1ca:	98 b1       	in	r25, 0x08	; 8
 1cc:	80 91 1b 01 	lds	r24, 0x011B
 1d0:	fe 01       	movw	r30, r28
 1d2:	e8 0f       	add	r30, r24
 1d4:	f1 1d       	adc	r31, r1
 1d6:	81 81       	ldd	r24, Z+1	; 0x01
 1d8:	80 95       	com	r24
 1da:	89 23       	and	r24, r25
 1dc:	88 b9       	out	0x08, r24	; 8

}   //end of next_digit function
 1de:	0f 90       	pop	r0
 1e0:	0f 90       	pop	r0
 1e2:	0f 90       	pop	r0
 1e4:	0f 90       	pop	r0
 1e6:	df 91       	pop	r29
 1e8:	cf 91       	pop	r28
 1ea:	08 95       	ret

000001ec <inc_seconds>:


//function to actually increment the time.
void inc_seconds(void){
	
    digits[0] ++;
 1ec:	80 91 1c 01 	lds	r24, 0x011C
 1f0:	8f 5f       	subi	r24, 0xFF	; 255
    if(digits[0] >= 10){
 1f2:	8a 30       	cpi	r24, 0x0A	; 10
 1f4:	18 f4       	brcc	.+6      	; 0x1fc <inc_seconds+0x10>


//function to actually increment the time.
void inc_seconds(void){
	
    digits[0] ++;
 1f6:	80 93 1c 01 	sts	0x011C, r24
 1fa:	07 c0       	rjmp	.+14     	; 0x20a <inc_seconds+0x1e>
    if(digits[0] >= 10){
        digits[0] = 0;
 1fc:	10 92 1c 01 	sts	0x011C, r1
        digits[1]++;
 200:	80 91 1d 01 	lds	r24, 0x011D
 204:	8f 5f       	subi	r24, 0xFF	; 255
 206:	80 93 1d 01 	sts	0x011D, r24
    }
    if(digits[1] >= 6){
 20a:	80 91 1d 01 	lds	r24, 0x011D
 20e:	86 30       	cpi	r24, 0x06	; 6
 210:	38 f0       	brcs	.+14     	; 0x220 <inc_seconds+0x34>
        digits[1] = 0;
 212:	10 92 1d 01 	sts	0x011D, r1
         digits[2]++;
 216:	80 91 1e 01 	lds	r24, 0x011E
 21a:	8f 5f       	subi	r24, 0xFF	; 255
 21c:	80 93 1e 01 	sts	0x011E, r24
    }
    if(digits[2] >= 10){
 220:	80 91 1e 01 	lds	r24, 0x011E
 224:	8a 30       	cpi	r24, 0x0A	; 10
 226:	38 f0       	brcs	.+14     	; 0x236 <inc_seconds+0x4a>
        digits[2] = 0;
 228:	10 92 1e 01 	sts	0x011E, r1
        digits[3] ++;
 22c:	80 91 1f 01 	lds	r24, 0x011F
 230:	8f 5f       	subi	r24, 0xFF	; 255
 232:	80 93 1f 01 	sts	0x011F, r24
    }
    if(digits[3] >= 10){
 236:	80 91 1f 01 	lds	r24, 0x011F
 23a:	8a 30       	cpi	r24, 0x0A	; 10
 23c:	10 f0       	brcs	.+4      	; 0x242 <inc_seconds+0x56>
        digits[3] = 0;
 23e:	10 92 1f 01 	sts	0x011F, r1
 242:	08 95       	ret

00000244 <timeequals0>:



void timeequals0 (void){
	for(int i = 0; i < 4; i++){
		digits[i] = 0;
 244:	ec e1       	ldi	r30, 0x1C	; 28
 246:	f1 e0       	ldi	r31, 0x01	; 1
 248:	10 82       	st	Z, r1
 24a:	11 82       	std	Z+1, r1	; 0x01
 24c:	12 82       	std	Z+2, r1	; 0x02
 24e:	13 82       	std	Z+3, r1	; 0x03
 250:	08 95       	ret

00000252 <shut_r_down>:
}



void shut_r_down(void){
	timeequals0();
 252:	0e 94 22 01 	call	0x244	; 0x244 <timeequals0>
	TCCR0B = 0;		//kill timer
 256:	15 bc       	out	0x25, r1	; 37
	PORTD = 0;		//turn off NPNs
 258:	1b b8       	out	0x0b, r1	; 11
	PORTC |= 0x0F;	//turn off P-ch
 25a:	88 b1       	in	r24, 0x08	; 8
 25c:	8f 60       	ori	r24, 0x0F	; 15
 25e:	88 b9       	out	0x08, r24	; 8
	set_sleep_mode(SLEEP_MODE_PWR_DOWN);	//going to deep sleep
 260:	83 b7       	in	r24, 0x33	; 51
 262:	81 7f       	andi	r24, 0xF1	; 241
 264:	84 60       	ori	r24, 0x04	; 4
 266:	83 bf       	out	0x33, r24	; 51
	PCIFR |= 0x01;	//clear interrupt flag
 268:	d8 9a       	sbi	0x1b, 0	; 27
	PCICR |= 0x01;	//enable Pin Change Interrupt
 26a:	e8 e6       	ldi	r30, 0x68	; 104
 26c:	f0 e0       	ldi	r31, 0x00	; 0
 26e:	80 81       	ld	r24, Z
 270:	81 60       	ori	r24, 0x01	; 1
 272:	80 83       	st	Z, r24
	sleep_mode();
 274:	83 b7       	in	r24, 0x33	; 51
 276:	81 60       	ori	r24, 0x01	; 1
 278:	83 bf       	out	0x33, r24	; 51
 27a:	88 95       	sleep
 27c:	83 b7       	in	r24, 0x33	; 51
 27e:	8e 7f       	andi	r24, 0xFE	; 254
 280:	83 bf       	out	0x33, r24	; 51
	asm ("nop");
 282:	00 00       	nop
	PCICR = 0;	//disable PC Interrupt
 284:	10 82       	st	Z, r1
	set_sleep_mode(SLEEP_MODE_IDLE);	//change back to IDLE
 286:	83 b7       	in	r24, 0x33	; 51
 288:	81 7f       	andi	r24, 0xF1	; 241
 28a:	83 bf       	out	0x33, r24	; 51
	clockstat = clockrun;	//arming for post-reset
 28c:	81 e0       	ldi	r24, 0x01	; 1
 28e:	80 93 01 01 	sts	0x0101, r24
	fallarm = 0;
 292:	10 92 18 01 	sts	0x0118, r1
	turnoff_arm = 1;
 296:	80 93 00 01 	sts	0x0100, r24
	cyclesinstat = 0;
 29a:	10 92 17 01 	sts	0x0117, r1
 29e:	10 92 16 01 	sts	0x0116, r1
	setsleepstat(0);
 2a2:	80 e0       	ldi	r24, 0x00	; 0
 2a4:	0e 94 a2 00 	call	0x144	; 0x144 <setsleepstat>
	TCCR0B |= 0x02;	//re-enable clock
 2a8:	85 b5       	in	r24, 0x25	; 37
 2aa:	82 60       	ori	r24, 0x02	; 2
 2ac:	85 bd       	out	0x25, r24	; 37
 2ae:	08 95       	ret

000002b0 <display_batt>:
}

//this just puts 'batt' across the display.  Will be called for 1 second prior to displaying the actual voltage.
void display_batt(void){
		for (int i = 11; i < 15; i ++){
			digits[(i-11)] = i;
 2b0:	ec e1       	ldi	r30, 0x1C	; 28
 2b2:	f1 e0       	ldi	r31, 0x01	; 1
 2b4:	8b e0       	ldi	r24, 0x0B	; 11
 2b6:	80 83       	st	Z, r24
 2b8:	8c e0       	ldi	r24, 0x0C	; 12
 2ba:	81 83       	std	Z+1, r24	; 0x01
 2bc:	8d e0       	ldi	r24, 0x0D	; 13
 2be:	82 83       	std	Z+2, r24	; 0x02
 2c0:	8e e0       	ldi	r24, 0x0E	; 14
 2c2:	83 83       	std	Z+3, r24	; 0x03
 2c4:	08 95       	ret

000002c6 <display_volts>:


void display_volts (u16 adval){

//this is will display the voltage...want to play with displaying the 'batt'	
adval /= 10;		//drop to x.yz volts.  will allow me to use the bottom of the colon as decimal place 
 2c6:	2a e0       	ldi	r18, 0x0A	; 10
 2c8:	30 e0       	ldi	r19, 0x00	; 0
 2ca:	b9 01       	movw	r22, r18
 2cc:	0e 94 64 02 	call	0x4c8	; 0x4c8 <__udivmodhi4>
 2d0:	cb 01       	movw	r24, r22
	digits[0] = adval % 10;
 2d2:	ec e1       	ldi	r30, 0x1C	; 28
 2d4:	f1 e0       	ldi	r31, 0x01	; 1
 2d6:	b9 01       	movw	r22, r18
 2d8:	0e 94 64 02 	call	0x4c8	; 0x4c8 <__udivmodhi4>
 2dc:	80 83       	st	Z, r24
	adval /= 10;
	digits [1] = adval %10;
 2de:	cb 01       	movw	r24, r22
 2e0:	b9 01       	movw	r22, r18
 2e2:	0e 94 64 02 	call	0x4c8	; 0x4c8 <__udivmodhi4>
 2e6:	81 83       	std	Z+1, r24	; 0x01
	adval /= 10;
	digits [2] = adval %10;
 2e8:	cb 01       	movw	r24, r22
 2ea:	b9 01       	movw	r22, r18
 2ec:	0e 94 64 02 	call	0x4c8	; 0x4c8 <__udivmodhi4>
 2f0:	82 83       	std	Z+2, r24	; 0x02
	digits [3] = 10;	//10 is all off
 2f2:	8a e0       	ldi	r24, 0x0A	; 10
 2f4:	83 83       	std	Z+3, r24	; 0x03
 2f6:	08 95       	ret

000002f8 <__vector_14>:
 2f8:	1f 92       	push	r1
 2fa:	0f 92       	push	r0
 2fc:	0f b6       	in	r0, 0x3f	; 63
 2fe:	0f 92       	push	r0
 300:	11 24       	eor	r1, r1
 302:	0f 93       	push	r16
 304:	1f 93       	push	r17
 306:	2f 93       	push	r18
 308:	3f 93       	push	r19
 30a:	4f 93       	push	r20
 30c:	5f 93       	push	r21
 30e:	6f 93       	push	r22
 310:	7f 93       	push	r23
 312:	8f 93       	push	r24
 314:	9f 93       	push	r25
 316:	af 93       	push	r26
 318:	bf 93       	push	r27
 31a:	cf 93       	push	r28
 31c:	ef 93       	push	r30
 31e:	ff 93       	push	r31
 320:	c3 b1       	in	r28, 0x03	; 3
 322:	c1 70       	andi	r28, 0x01	; 1
 324:	c0 93 1a 01 	sts	0x011A, r28
 328:	20 91 19 01 	lds	r18, 0x0119
 32c:	c2 13       	cpse	r28, r18
 32e:	0a c0       	rjmp	.+20     	; 0x344 <__vector_14+0x4c>
 330:	80 91 16 01 	lds	r24, 0x0116
 334:	90 91 17 01 	lds	r25, 0x0117
 338:	01 96       	adiw	r24, 0x01	; 1
 33a:	90 93 17 01 	sts	0x0117, r25
 33e:	80 93 16 01 	sts	0x0116, r24
 342:	04 c0       	rjmp	.+8      	; 0x34c <__vector_14+0x54>
 344:	10 92 17 01 	sts	0x0117, r1
 348:	10 92 16 01 	sts	0x0116, r1
 34c:	00 91 16 01 	lds	r16, 0x0116
 350:	10 91 17 01 	lds	r17, 0x0117
 354:	03 33       	cpi	r16, 0x33	; 51
 356:	11 05       	cpc	r17, r1
 358:	58 f0       	brcs	.+22     	; 0x370 <__vector_14+0x78>
 35a:	22 23       	and	r18, r18
 35c:	49 f0       	breq	.+18     	; 0x370 <__vector_14+0x78>
 35e:	80 91 00 01 	lds	r24, 0x0100
 362:	88 23       	and	r24, r24
 364:	29 f0       	breq	.+10     	; 0x370 <__vector_14+0x78>
 366:	81 e0       	ldi	r24, 0x01	; 1
 368:	80 93 18 01 	sts	0x0118, r24
 36c:	80 93 01 01 	sts	0x0101, r24
 370:	80 91 18 01 	lds	r24, 0x0118
 374:	88 23       	and	r24, r24
 376:	41 f0       	breq	.+16     	; 0x388 <__vector_14+0x90>
 378:	c1 11       	cpse	r28, r1
 37a:	06 c0       	rjmp	.+12     	; 0x388 <__vector_14+0x90>
 37c:	10 92 18 01 	sts	0x0118, r1
 380:	0e 94 22 01 	call	0x244	; 0x244 <timeequals0>
 384:	10 92 01 01 	sts	0x0101, r1
 388:	80 91 00 01 	lds	r24, 0x0100
 38c:	88 23       	and	r24, r24
 38e:	81 f0       	breq	.+32     	; 0x3b0 <__vector_14+0xb8>
 390:	c1 11       	cpse	r28, r1
 392:	0e c0       	rjmp	.+28     	; 0x3b0 <__vector_14+0xb8>
 394:	00 31       	cpi	r16, 0x10	; 16
 396:	17 42       	sbci	r17, 0x27	; 39
 398:	58 f0       	brcs	.+22     	; 0x3b0 <__vector_14+0xb8>
 39a:	10 92 15 01 	sts	0x0115, r1
 39e:	10 92 14 01 	sts	0x0114, r1
 3a2:	0e 94 58 01 	call	0x2b0	; 0x2b0 <display_batt>
 3a6:	82 e0       	ldi	r24, 0x02	; 2
 3a8:	80 93 01 01 	sts	0x0101, r24
 3ac:	10 92 00 01 	sts	0x0100, r1
 3b0:	c0 93 19 01 	sts	0x0119, r28
 3b4:	80 91 13 01 	lds	r24, 0x0113
 3b8:	8f 5f       	subi	r24, 0xFF	; 255
 3ba:	80 93 13 01 	sts	0x0113, r24
 3be:	82 30       	cpi	r24, 0x02	; 2
 3c0:	18 f0       	brcs	.+6      	; 0x3c8 <__vector_14+0xd0>
 3c2:	88 b1       	in	r24, 0x08	; 8
 3c4:	8f 60       	ori	r24, 0x0F	; 15
 3c6:	88 b9       	out	0x08, r24	; 8
 3c8:	80 91 13 01 	lds	r24, 0x0113
 3cc:	8a 30       	cpi	r24, 0x0A	; 10
 3ce:	68 f0       	brcs	.+26     	; 0x3ea <__vector_14+0xf2>
 3d0:	0e 94 b1 00 	call	0x162	; 0x162 <next_digit>
 3d4:	10 92 13 01 	sts	0x0113, r1
 3d8:	80 91 14 01 	lds	r24, 0x0114
 3dc:	90 91 15 01 	lds	r25, 0x0115
 3e0:	01 96       	adiw	r24, 0x01	; 1
 3e2:	90 93 15 01 	sts	0x0115, r25
 3e6:	80 93 14 01 	sts	0x0114, r24
 3ea:	80 91 14 01 	lds	r24, 0x0114
 3ee:	90 91 15 01 	lds	r25, 0x0115
 3f2:	84 3f       	cpi	r24, 0xF4	; 244
 3f4:	91 40       	sbci	r25, 0x01	; 1
 3f6:	28 f1       	brcs	.+74     	; 0x442 <__vector_14+0x14a>
 3f8:	80 91 01 01 	lds	r24, 0x0101
 3fc:	81 30       	cpi	r24, 0x01	; 1
 3fe:	19 f4       	brne	.+6      	; 0x406 <__vector_14+0x10e>
 400:	0e 94 f6 00 	call	0x1ec	; 0x1ec <inc_seconds>
 404:	1a c0       	rjmp	.+52     	; 0x43a <__vector_14+0x142>
 406:	82 30       	cpi	r24, 0x02	; 2
 408:	41 f4       	brne	.+16     	; 0x41a <__vector_14+0x122>
 40a:	0e 94 5a 00 	call	0xb4	; 0xb4 <read_ADC>
 40e:	0e 94 63 01 	call	0x2c6	; 0x2c6 <display_volts>
 412:	83 e0       	ldi	r24, 0x03	; 3
 414:	80 93 01 01 	sts	0x0101, r24
 418:	10 c0       	rjmp	.+32     	; 0x43a <__vector_14+0x142>
 41a:	83 30       	cpi	r24, 0x03	; 3
 41c:	71 f4       	brne	.+28     	; 0x43a <__vector_14+0x142>
 41e:	80 91 1a 01 	lds	r24, 0x011A
 422:	88 23       	and	r24, r24
 424:	51 f0       	breq	.+20     	; 0x43a <__vector_14+0x142>
 426:	80 91 16 01 	lds	r24, 0x0116
 42a:	90 91 17 01 	lds	r25, 0x0117
 42e:	80 31       	cpi	r24, 0x10	; 16
 430:	97 42       	sbci	r25, 0x27	; 39
 432:	18 f0       	brcs	.+6      	; 0x43a <__vector_14+0x142>
 434:	81 e0       	ldi	r24, 0x01	; 1
 436:	0e 94 a2 00 	call	0x144	; 0x144 <setsleepstat>
 43a:	10 92 15 01 	sts	0x0115, r1
 43e:	10 92 14 01 	sts	0x0114, r1
 442:	ff 91       	pop	r31
 444:	ef 91       	pop	r30
 446:	cf 91       	pop	r28
 448:	bf 91       	pop	r27
 44a:	af 91       	pop	r26
 44c:	9f 91       	pop	r25
 44e:	8f 91       	pop	r24
 450:	7f 91       	pop	r23
 452:	6f 91       	pop	r22
 454:	5f 91       	pop	r21
 456:	4f 91       	pop	r20
 458:	3f 91       	pop	r19
 45a:	2f 91       	pop	r18
 45c:	1f 91       	pop	r17
 45e:	0f 91       	pop	r16
 460:	0f 90       	pop	r0
 462:	0f be       	out	0x3f, r0	; 63
 464:	0f 90       	pop	r0
 466:	1f 90       	pop	r1
 468:	18 95       	reti

0000046a <main>:


int main(void)
{ 
	
DDRD = 0xFF;	//portD drives the digits of the 7-segment display
 46a:	8f ef       	ldi	r24, 0xFF	; 255
 46c:	8a b9       	out	0x0a, r24	; 10
PORTD = 0;		//initially kill output
 46e:	1b b8       	out	0x0b, r1	; 11
DDRC = 0x1F;	//PC4 = divider_control, PC0-3 = pass p-fets for digits
 470:	8f e1       	ldi	r24, 0x1F	; 31
 472:	87 b9       	out	0x07, r24	; 7
PORTC = 0;
 474:	18 b8       	out	0x08, r1	; 8
DDRB = 0xEE;	//PB0 = button_in, PB1 = TP1
 476:	8e ee       	ldi	r24, 0xEE	; 238
 478:	84 b9       	out	0x04, r24	; 4
PORTB = 0;		//all off.	
 47a:	15 b8       	out	0x05, r1	; 5
PCMSK0 |= 0x01;	//unmask PCINT0 which is the button.
 47c:	80 91 6b 00 	lds	r24, 0x006B
 480:	81 60       	ori	r24, 0x01	; 1
 482:	80 93 6b 00 	sts	0x006B, r24
timer0Init();
 486:	0e 94 a5 00 	call	0x14a	; 0x14a <timer0Init>
init_ADC();
 48a:	0e 94 53 00 	call	0xa6	; 0xa6 <init_ADC>
sei();	
 48e:	78 94       	sei
set_sleep_mode(SLEEP_MODE_IDLE);
 490:	83 b7       	in	r24, 0x33	; 51
 492:	81 7f       	andi	r24, 0xF1	; 241
 494:	83 bf       	out	0x33, r24	; 51
	
	
  
    while (1) 
    {
	sleep_mode();	
 496:	83 b7       	in	r24, 0x33	; 51
 498:	81 60       	ori	r24, 0x01	; 1
 49a:	83 bf       	out	0x33, r24	; 51
 49c:	88 95       	sleep
 49e:	83 b7       	in	r24, 0x33	; 51
 4a0:	8e 7f       	andi	r24, 0xFE	; 254
 4a2:	83 bf       	out	0x33, r24	; 51
		if(gotosleep){	//go to sleep is a flag that gets set wehn it's time to go to sleep.  
 4a4:	80 91 12 01 	lds	r24, 0x0112
 4a8:	88 23       	and	r24, r24
 4aa:	a9 f3       	breq	.-22     	; 0x496 <main+0x2c>
			shut_r_down();
 4ac:	0e 94 29 01 	call	0x252	; 0x252 <shut_r_down>
 4b0:	f2 cf       	rjmp	.-28     	; 0x496 <main+0x2c>

000004b2 <__muluhisi3>:
 4b2:	0e 94 9a 02 	call	0x534	; 0x534 <__umulhisi3>
 4b6:	a5 9f       	mul	r26, r21
 4b8:	90 0d       	add	r25, r0
 4ba:	b4 9f       	mul	r27, r20
 4bc:	90 0d       	add	r25, r0
 4be:	a4 9f       	mul	r26, r20
 4c0:	80 0d       	add	r24, r0
 4c2:	91 1d       	adc	r25, r1
 4c4:	11 24       	eor	r1, r1
 4c6:	08 95       	ret

000004c8 <__udivmodhi4>:
 4c8:	aa 1b       	sub	r26, r26
 4ca:	bb 1b       	sub	r27, r27
 4cc:	51 e1       	ldi	r21, 0x11	; 17
 4ce:	07 c0       	rjmp	.+14     	; 0x4de <__udivmodhi4_ep>

000004d0 <__udivmodhi4_loop>:
 4d0:	aa 1f       	adc	r26, r26
 4d2:	bb 1f       	adc	r27, r27
 4d4:	a6 17       	cp	r26, r22
 4d6:	b7 07       	cpc	r27, r23
 4d8:	10 f0       	brcs	.+4      	; 0x4de <__udivmodhi4_ep>
 4da:	a6 1b       	sub	r26, r22
 4dc:	b7 0b       	sbc	r27, r23

000004de <__udivmodhi4_ep>:
 4de:	88 1f       	adc	r24, r24
 4e0:	99 1f       	adc	r25, r25
 4e2:	5a 95       	dec	r21
 4e4:	a9 f7       	brne	.-22     	; 0x4d0 <__udivmodhi4_loop>
 4e6:	80 95       	com	r24
 4e8:	90 95       	com	r25
 4ea:	bc 01       	movw	r22, r24
 4ec:	cd 01       	movw	r24, r26
 4ee:	08 95       	ret

000004f0 <__udivmodsi4>:
 4f0:	a1 e2       	ldi	r26, 0x21	; 33
 4f2:	1a 2e       	mov	r1, r26
 4f4:	aa 1b       	sub	r26, r26
 4f6:	bb 1b       	sub	r27, r27
 4f8:	fd 01       	movw	r30, r26
 4fa:	0d c0       	rjmp	.+26     	; 0x516 <__udivmodsi4_ep>

000004fc <__udivmodsi4_loop>:
 4fc:	aa 1f       	adc	r26, r26
 4fe:	bb 1f       	adc	r27, r27
 500:	ee 1f       	adc	r30, r30
 502:	ff 1f       	adc	r31, r31
 504:	a2 17       	cp	r26, r18
 506:	b3 07       	cpc	r27, r19
 508:	e4 07       	cpc	r30, r20
 50a:	f5 07       	cpc	r31, r21
 50c:	20 f0       	brcs	.+8      	; 0x516 <__udivmodsi4_ep>
 50e:	a2 1b       	sub	r26, r18
 510:	b3 0b       	sbc	r27, r19
 512:	e4 0b       	sbc	r30, r20
 514:	f5 0b       	sbc	r31, r21

00000516 <__udivmodsi4_ep>:
 516:	66 1f       	adc	r22, r22
 518:	77 1f       	adc	r23, r23
 51a:	88 1f       	adc	r24, r24
 51c:	99 1f       	adc	r25, r25
 51e:	1a 94       	dec	r1
 520:	69 f7       	brne	.-38     	; 0x4fc <__udivmodsi4_loop>
 522:	60 95       	com	r22
 524:	70 95       	com	r23
 526:	80 95       	com	r24
 528:	90 95       	com	r25
 52a:	9b 01       	movw	r18, r22
 52c:	ac 01       	movw	r20, r24
 52e:	bd 01       	movw	r22, r26
 530:	cf 01       	movw	r24, r30
 532:	08 95       	ret

00000534 <__umulhisi3>:
 534:	a2 9f       	mul	r26, r18
 536:	b0 01       	movw	r22, r0
 538:	b3 9f       	mul	r27, r19
 53a:	c0 01       	movw	r24, r0
 53c:	a3 9f       	mul	r26, r19
 53e:	70 0d       	add	r23, r0
 540:	81 1d       	adc	r24, r1
 542:	11 24       	eor	r1, r1
 544:	91 1d       	adc	r25, r1
 546:	b2 9f       	mul	r27, r18
 548:	70 0d       	add	r23, r0
 54a:	81 1d       	adc	r24, r1
 54c:	11 24       	eor	r1, r1
 54e:	91 1d       	adc	r25, r1
 550:	08 95       	ret

00000552 <_exit>:
 552:	f8 94       	cli

00000554 <__stop_program>:
 554:	ff cf       	rjmp	.-2      	; 0x554 <__stop_program>
